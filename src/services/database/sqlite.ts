// src/services/database/sqlite.ts
import * as SQLite from 'expo-sqlite';
import { migrations } from './migrations';

const DATABASE_NAME = 'innoma_obras.db';
const DATABASE_VERSION = 1;

let database: SQLite.SQLiteDatabase | null = null;

/**
 * Inicializa o banco de dados SQLite
 */
export async function initializeDatabase(): Promise<void> {
    try {
        console.log('üöÄ Inicializando banco de dados...');

        // Abrir/criar banco de dados
        database = await SQLite.openDatabaseAsync(DATABASE_NAME);

        // Verificar se o banco est√° funcionando
        await testDatabaseConnection();

        // Executar migra√ß√µes
        await runMigrations();

        console.log('‚úÖ Banco de dados inicializado com sucesso');
    } catch (error) {
        console.error('‚ùå Erro ao inicializar banco de dados:', error);
        throw error;
    }
}

/**
 * Testa a conex√£o com o banco de dados
 */
async function testDatabaseConnection(): Promise<void> {
    try {
        const db = getDatabase();
        const result: any = await db.getAllAsync('SELECT 1 as test');
        if (result.length === 0 || result[0].test !== 1) {
            throw new Error('Teste de conex√£o com banco falhou');
        }
        console.log('üîå Conex√£o com banco de dados verificada');
    } catch (error) {
        console.error('‚ùå Erro na conex√£o com banco:', error);
        throw error;
    }
}

/**
 * Retorna a inst√¢ncia do banco de dados
 */
export function getDatabase(): SQLite.SQLiteDatabase {
    if (!database) {
        throw new Error('Banco de dados n√£o foi inicializado. Chame initializeDatabase() primeiro.');
    }
    return database;
}

/**
 * Executa uma query SQL
 */
export async function executeQuery(
    sql: string,
    params: any[] = []
): Promise<SQLite.SQLiteRunResult> {
    try {
        const db = getDatabase();
        const result = await db.runAsync(sql, params);
        console.log(`üìù Query executada: ${sql.substring(0, 50)}...`, {
            params: params.length > 0 ? params : 'sem par√¢metros',
            changes: result.changes
        });
        return result;
    } catch (error) {
        console.error('‚ùå Erro na query SQL:', {
            sql: sql.substring(0, 100),
            params,
            error: error instanceof Error ? error.message : error
        });
        throw error;
    }
}

/**
 * Executa uma query SELECT e retorna os resultados
 */
export async function executeSelectQuery(
    sql: string,
    params: any[] = []
): Promise<any[]> {
    try {
        const db = getDatabase();
        const result = await db.getAllAsync(sql, params);
        console.log(`üîç Select executado: ${sql.substring(0, 50)}...`, {
            params: params.length > 0 ? params : 'sem par√¢metros',
            rows: result.length
        });
        return result;
    } catch (error) {
        console.error('‚ùå Erro na query SELECT:', {
            sql: sql.substring(0, 100),
            params,
            error: error instanceof Error ? error.message : error
        });
        throw error;
    }
}

/**
 * Executa m√∫ltiplas queries em uma transa√ß√£o
 */
export async function executeTransaction(
    queries: Array<{ sql: string; params?: any[] }>
): Promise<any[]> {
    try {
        const db = getDatabase();
        const results: any[] = [];

        await db.withTransactionAsync(async () => {
            for (const query of queries) {
                const result = await db.runAsync(query.sql, query.params || []);
                results.push(result);
            }
        });

        console.log(`üì¶ Transa√ß√£o executada com ${queries.length} queries`);
        return results;
    } catch (error) {
        console.error('‚ùå Erro na transa√ß√£o:', error);
        throw error;
    }
}

/**
 * Executa as migra√ß√µes do banco de dados de forma segura
 */
async function runMigrations(): Promise<void> {
    try {
        console.log('üîÑ Executando migra√ß√µes...');

        // Criar tabela de vers√µes se n√£o existir
        await executeQuery(`
            CREATE TABLE IF NOT EXISTS schema_versions (
                version INTEGER PRIMARY KEY,
                applied_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        `);

        // Verificar vers√£o atual
        const versionResult = await executeSelectQuery(
            'SELECT MAX(version) as current_version FROM schema_versions'
        );

        const currentVersion = versionResult[0]?.current_version || 0;
        console.log(`üìä Vers√£o atual do schema: ${currentVersion}`);

        // Executar migra√ß√µes pendentes
        for (const migration of migrations) {
            if (migration.version > currentVersion) {
                console.log(`üìù Aplicando migra√ß√£o ${migration.version}: ${migration.name}`);

                try {
                    // Executar cada SQL da migra√ß√£o de forma individual
                    for (let i = 0; i < migration.sql.length; i++) {
                        const sql = migration.sql[i];
                        try {
                            await executeQuery(sql);
                            console.log(`   ‚úÖ SQL ${i + 1}/${migration.sql.length} executado`);
                        } catch (sqlError) {
                            // Se for erro de "already exists", apenas avisar e continuar
                            if (sqlError instanceof Error &&
                                (sqlError.message.includes('already exists') ||
                                    sqlError.message.includes('duplicate column name'))) {
                                console.log(`   ‚ö†Ô∏è SQL ${i + 1}: ${sqlError.message} (ignorado)`);
                                continue;
                            }
                            throw sqlError;
                        }
                    }

                    // Registrar migra√ß√£o aplicada
                    await executeQuery(
                        'INSERT INTO schema_versions (version) VALUES (?)',
                        [migration.version]
                    );

                    console.log(`‚úÖ Migra√ß√£o ${migration.version} aplicada com sucesso`);
                } catch (migrationError) {
                    console.error(`‚ùå Erro na migra√ß√£o ${migration.version}:`, migrationError);

                    // Se a migra√ß√£o j√° foi parcialmente aplicada, tentar registr√°-la
                    try {
                        await executeQuery(
                            'INSERT OR IGNORE INTO schema_versions (version) VALUES (?)',
                            [migration.version]
                        );
                        console.log(`‚ö†Ô∏è Migra√ß√£o ${migration.version} marcada como aplicada ap√≥s erro`);
                    } catch (registerError) {
                        console.error(`‚ùå Erro ao registrar migra√ß√£o ${migration.version}:`, registerError);
                    }

                    // N√£o parar o processo, apenas reportar
                    console.log(`‚ö†Ô∏è Continuando com outras migra√ß√µes...`);
                }
            } else {
                console.log(`‚è≠Ô∏è Migra√ß√£o ${migration.version} j√° aplicada`);
            }
        }

        // Verificar integridade das tabelas principais
        await verifyDatabaseIntegrity();

        console.log('‚úÖ Todas as migra√ß√µes foram processadas');
    } catch (error) {
        console.error('‚ùå Erro ao executar migra√ß√µes:', error);
        throw error;
    }
}

/**
 * Verifica a integridade das tabelas principais
 */
async function verifyDatabaseIntegrity(): Promise<void> {
    try {
        const essentialTables = ['usuarios', 'obras', 'tarefas', 'diarios', 'sync_queue'];

        for (const tableName of essentialTables) {
            const exists = await tableExists(tableName);
            if (exists) {
                console.log(`‚úÖ Tabela ${tableName} verificada`);
            } else {
                console.warn(`‚ö†Ô∏è Tabela ${tableName} n√£o encontrada`);
            }
        }
    } catch (error) {
        console.error('‚ùå Erro na verifica√ß√£o de integridade:', error);
    }
}

/**
 * Limpa todos os dados do banco (√∫til para desenvolvimento/testes)
 */
export async function clearDatabase(): Promise<void> {
    try {
        console.log('üóëÔ∏è Limpando banco de dados...');

        const tables = [
            'usuarios', 'obras', 'tarefas', 'diarios', 'equipe_obras',
            'materiais', 'movimentacoes_materiais', 'documentos',
            'checklist_qualidade', 'cronograma', 'custos', 'sync_queue'
        ];

        for (const table of tables) {
            try {
                await executeQuery(`DELETE FROM ${table}`);
                console.log(`üóëÔ∏è Tabela ${table} limpa`);
            } catch (error) {
                console.warn(`‚ö†Ô∏è Erro ao limpar tabela ${table}:`, error);
            }
        }

        // Limpar vers√µes de schema para for√ßar re-execu√ß√£o das migra√ß√µes
        try {
            await executeQuery('DELETE FROM schema_versions');
            console.log('üóëÔ∏è Vers√µes de schema limpas');
        } catch (error) {
            console.warn('‚ö†Ô∏è Erro ao limpar schema_versions:', error);
        }

        console.log('‚úÖ Banco de dados limpo com sucesso');
    } catch (error) {
        console.error('‚ùå Erro ao limpar banco de dados:', error);
        throw error;
    }
}

/**
 * Fecha a conex√£o com o banco de dados
 */
export async function closeDatabase(): Promise<void> {
    try {
        if (database) {
            await database.closeAsync();
            database = null;
            console.log('üìå Conex√£o com banco de dados fechada');
        }
    } catch (error) {
        console.error('‚ùå Erro ao fechar banco:', error);
    }
}

/**
 * Backup dos dados em JSON (para desenvolvimento)
 */
export async function exportData(): Promise<any> {
    try {
        const data: any = {};

        const tables = [
            'usuarios', 'obras', 'tarefas', 'diarios', 'equipe_obras',
            'materiais', 'movimentacoes_materiais', 'documentos',
            'checklist_qualidade', 'cronograma', 'custos'
        ];

        for (const table of tables) {
            try {
                data[table] = await executeSelectQuery(`SELECT * FROM ${table}`);
            } catch (error) {
                console.warn(`‚ö†Ô∏è Erro ao exportar tabela ${table}:`, error);
                data[table] = [];
            }
        }

        return data;
    } catch (error) {
        console.error('‚ùå Erro ao exportar dados:', error);
        throw error;
    }
}

/**
 * Utilit√°rio para verificar se uma tabela existe
 */
export async function tableExists(tableName: string): Promise<boolean> {
    try {
        const result = await executeSelectQuery(
            `SELECT name FROM sqlite_master WHERE type='table' AND name=?`,
            [tableName]
        );
        return result.length > 0;
    } catch (error) {
        console.error(`‚ùå Erro ao verificar tabela ${tableName}:`, error);
        return false;
    }
}

/**
 * Utilit√°rio para contar registros em uma tabela
 */
export async function countRecords(tableName: string): Promise<number> {
    try {
        const exists = await tableExists(tableName);
        if (!exists) {
            return 0;
        }

        const result = await executeSelectQuery(`SELECT COUNT(*) as count FROM ${tableName}`);
        return result[0]?.count || 0;
    } catch (error) {
        console.error(`‚ùå Erro ao contar registros em ${tableName}:`, error);
        return 0;
    }
}

/**
 * Utilit√°rio para debug - listar todas as tabelas
 */
export async function listTables(): Promise<string[]> {
    try {
        const result = await executeSelectQuery(
            `SELECT name FROM sqlite_master WHERE type='table' ORDER BY name`
        );
        return result.map(row => row.name);
    } catch (error) {
        console.error('‚ùå Erro ao listar tabelas:', error);
        return [];
    }
}

/**
 * Utilit√°rio para debug - obter informa√ß√µes do banco
 */
export async function getDatabaseInfo(): Promise<any> {
    try {
        const tables = await listTables();
        const info: any = {
            tables: {},
            totalTables: tables.length,
        };

        for (const table of tables) {
            const count = await countRecords(table);
            info.tables[table] = count;
        }

        return info;
    } catch (error) {
        console.error('‚ùå Erro ao obter informa√ß√µes do banco:', error);
        return { error: error instanceof Error ? error.message : 'Erro desconhecido' };
    }
}